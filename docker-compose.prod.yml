version: "3"
services:
  # Backend Services
  services:
    container_name: services # Keep this the same with the service name for better compatibility with both Docker Swarm and Compose configurations
    build:
      context: ./services
      dockerfile: docker/Dockerfile.prod
      args:
        PORT: ${PORT}
    restart: unless-stopped
    networks:
      application-network: # External network to access this application
      isolated-network-rabbit: # Isolated network for RabbitMQ
#    ports: # Uncomment for testing purposes; preferably, it should only be accessible through the network `application-network`!
#      - ${PORT}:${PORT}
    env_file:
      - application.properties
      - rabbitmq.properties
    environment:
      RABBITMQ_HOST: rabbitmq # Ensure this matches the service and container name of the RabbitMQ service
    secrets:
      - source: secret-services-mongodb_uri
        target: mongodb-uri.secret
      - source: secret-services-jwt
        target: jwt.secret
    healthcheck:
      test: curl --fail http://localhost:${PORT}/api/${APP_NAME}/services/healthcheck/v1 || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      rabbitmq:
        condition: service_healthy
      runner:
        condition: service_healthy
  # RabbitMQ
  rabbitmq:
    container_name: rabbitmq # Keep this the same with the service name for better compatibility with both Docker Swarm and Compose configurations
    image: "rabbitmq:management"
    restart: unless-stopped
    networks:
      isolated-network-rabbit: # Isolated network for RabbitMQ
    volumes:
      - volume-rabbitmq.data:/var/lib/rabbitmq # Bind the data volume for RabbitMQ
#    ports: # Uncomment for testing purposes; under normal conditions, it should only be accessible through the isolated RabbitMQ network!
#      - "5672:5672" # RabbitMQ
#      - "15672:15672" # RabbitMQ Management Portal
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_MANAGEMENT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_MANAGEMENT_PASSWORD}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 10
  # Test Runner Service
  runner:
    container_name: runner # Keep this the same with the service name for better compatibility with both Docker Swarm and Compose configurations
    build:
      context: ./test-runner
      dockerfile: docker/Dockerfile.prod
      args:
        PORT: ${PORT}
    restart: unless-stopped
    networks:
      isolated-network-mongo: # Isolated network for MongoDB
      isolated-network-rabbit: # Isolated network for RabbitMQ
    volumes:
      - ${DOCKER_SOCKET_PATH}:${DOCKER_SOCKET_PATH} # Mount the Docker socket from the host machine into the Docker container
#    ports: # Uncomment for testing purposes; under normal conditions, it should only be accessible through the isolated RabbitMQ network!
#      - 4001:${PORT}
    env_file:
      - application.properties
      - rabbitmq.properties
    environment:
      MONGODB_URI: mongodb://${MONGO_HOSTS}/testrunner_db?replicaSet=${MONGO_REPL_ID}&retryWrites=true&w=majority
      RABBITMQ_HOST: rabbitmq # Ensure this matches the service and container name of the RabbitMQ service
    healthcheck:
      test: curl --fail http://localhost:${PORT}/api/${APP_NAME}/runner/v1/healthcheck/docker || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      mongo-manager:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
networks:
  application-network: # External network for accessing this application
  isolated-network-rabbit: # Isolated network for RabbitMQ
volumes:
  volume-rabbitmq.data: # Data volume for RabbitMQ
secrets:
  secret-services-mongodb_uri:
    file: ./services/secrets/mongodb-uri.secret
  secret-services-jwt:
    file: ./services/secrets/jwt.secret
