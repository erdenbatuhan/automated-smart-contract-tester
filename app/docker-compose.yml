# Docker Compose Configuration (To be run with ./mongo/docker-compose.mongo.yml)

version: "3"
networks:
  isolated-network-runner:
services:
  # Services
  services:
    container_name: ${SERVICE_NAME_SERVICES}
    build:
      context: ./services
      dockerfile: Dockerfile
      args:
        ENV: ${ENV}
        PORT: ${SERVICE_PORT}
    restart: unless-stopped
    networks:
      - isolated-network-mongo
      - isolated-network-runner
    ports:
      - 8000:${SERVICE_PORT}
    environment:
      APP_NAME: ${APP_NAME}
      SERVICE_NAME: ${SERVICE_NAME_SERVICES}
      PORT: ${SERVICE_PORT}
      MONGODB_URI: ${SERVICES_MONGODB_URI}
      JWT_SECRET: ${SERVICES_JWT_SECRET}
      TESTRUNNER_SERVICE_NAME: ${SERVICE_NAME_TESTRUNNER}
      TESTRUNNER_HOST: ${SERVICE_NAME_TESTRUNNER}:${SERVICE_PORT}
    depends_on:
      runner:
        condition: service_healthy
  # Test Runner
  runner:
    container_name: ${SERVICE_NAME_TESTRUNNER}
    build:
      context: ./test-runner
      dockerfile: Dockerfile
      args:
        ENV: ${ENV}
        PORT: ${SERVICE_PORT}
    restart: unless-stopped
    networks:
      - isolated-network-mongo
      - isolated-network-runner
    volumes:
      - ${DOCKER_SOCKET_PATH}:${DOCKER_SOCKET_PATH} # Mount the Docker socket from the host machine into the Docker container
    #    ports:
    #      - 8001:${SERVICE_PORT} # Uncomment only for testing purposes; should be accessible exclusively through the runner-isolated-network!
    environment:
      APP_NAME: ${APP_NAME}
      SERVICE_NAME: ${SERVICE_NAME_TESTRUNNER}
      PORT: ${SERVICE_PORT}
      MONGODB_URI: mongodb://${MONGO_HOSTS}/testrunner_db?replicaSet=${MONGO_REPL_ID}&retryWrites=true&w=majority
    healthcheck:
      test: curl --fail http://localhost:${SERVICE_PORT} || exit 1
      interval: 3s
      timeout: 5s
      retries: 10
    depends_on:
      mongo-manager:
        condition: service_completed_successfully
