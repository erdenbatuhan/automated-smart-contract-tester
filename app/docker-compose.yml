# Docker Compose Configuration (To be run with ./mongo/docker-compose.mongo.yml)

version: "3"
networks:
  isolated-rabbit-network: # Isolated Network for RabbitMQ
volumes:
  volume-rabbitmq.data: # Data volume for RabbitMQ
services:
  # Services
  services:
    container_name: services
    build:
      context: ./services
      dockerfile: Dockerfile
      args:
        ENV: ${ENV}
        PORT: ${SERVICE_PORT}
    restart: unless-stopped
    networks:
      isolated-rabbit-network: # Isolated Network for RabbitMQ
    ports:
      - 8000:${SERVICE_PORT}
    env_file:
      - rabbitmq.properties
    environment:
      APP_NAME: ${APP_NAME}
      SERVICE_NAME: services
      PORT: ${SERVICE_PORT}
      MONGODB_URI: ${SERVICES_MONGODB_URI}
      JWT_SECRET: ${SERVICES_JWT_SECRET}
      RABBITMQ_HOST: rabbitmq # The service and container name of RabbitMQ
    healthcheck:
      test: curl --fail http://localhost:${SERVICE_PORT} || exit 1
      interval: 3s
      timeout: 5s
      retries: 10
    depends_on:
      rabbitmq:
        condition: service_healthy
      runner:
        condition: service_healthy
  # RabbitMQ
  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:management"
    restart: unless-stopped
    networks:
      isolated-rabbit-network: # Isolated Network for RabbitMQ
    volumes:
      - volume-rabbitmq.data:/var/lib/rabbitmq # Bind the data volume for RabbitMQ
    ports:
      - "15672:15672" # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_MANAGEMENT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_MANAGEMENT_PASSWORD}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
  # Test Runner
  runner:
    container_name: runner
    build:
      context: ./test-runner
      dockerfile: Dockerfile
      args:
        ENV: ${ENV}
        PORT: ${SERVICE_PORT}
    restart: unless-stopped
    networks:
      isolated-network-mongo: # Isolated Network for MongoDB
      isolated-rabbit-network: # Isolated Network for RabbitMQ
    volumes:
      - ${DOCKER_SOCKET_PATH}:${DOCKER_SOCKET_PATH} # Mount the Docker socket from the host machine into the Docker container
    #    ports:
    #      - 8001:${SERVICE_PORT} # Uncomment only for testing purposes; should be accessible exclusively through the isolated rabbit network!
    env_file:
      - rabbitmq.properties
    environment:
      APP_NAME: ${APP_NAME}
      SERVICE_NAME: runner
      PORT: ${SERVICE_PORT}
      MONGODB_URI: mongodb://${MONGO_HOSTS}/testrunner_db?replicaSet=${MONGO_REPL_ID}&retryWrites=true&w=majority
      RABBITMQ_HOST: rabbitmq # The service and container name of RabbitMQ
    healthcheck:
      test: curl --fail http://localhost:${SERVICE_PORT} || exit 1
      interval: 3s
      timeout: 5s
      retries: 10
    depends_on:
      mongo-manager:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
