# Docker Compose Configuration (To be run with ./mongo/docker-compose.mongo.yml)

version: "3"
name: ${APP_NAME}
networks:
  isolated-network-runner:
    name: ${APP_NAME}-isolated-network-runner
services:
  # Service: Services
  services:
    container_name: ${SERVICES_CONTAINER_NAME}
    build:
      context: ./services
      dockerfile: Dockerfile
      args:
        STAGING: ${STAGING}
        PORT: ${SERVICES_PORT}
    restart: on-failure
    networks:
      - isolated-network-mongo
      - isolated-network-runner
    ports:
      - ${SERVICES_PORT}:${SERVICES_PORT}
    environment:
      APP_NAME: ${APP_NAME}
      SERVICE_NAME: ${SERVICES_SERVICE_NAME}
      PORT: ${SERVICES_PORT}
      JWT_SECRET: ${SERVICES_JWT_SECRET}
      MONGO_DB_URI: mongodb://${MONGO_HOSTS}/${SERVICES_DB}?replicaSet=${MONGO_REPL_ID}&retryWrites=true&w=majority
      TESTRUNNER_HOST: ${TESTRUNNER_CONTAINER_NAME}:${TESTRUNNER_PORT} # app name + service name
    depends_on:
      - mongo-manager
      - runner
  # Service: Test Runner
  runner:
    container_name: ${TESTRUNNER_CONTAINER_NAME}
    build:
      context: ./test-runner
      dockerfile: Dockerfile
      args:
        STAGING: ${STAGING}
        PORT: ${TESTRUNNER_PORT}
    restart: on-failure
    networks:
      - isolated-network-mongo
      - isolated-network-runner
    volumes:
      - ${DOCKER_SOCKET_PATH}:${DOCKER_SOCKET_PATH} # Mount the Docker socket from the host machine into the Docker container
    ports:
      - ${TESTRUNNER_PORT}:${TESTRUNNER_PORT} # Remove later; it should only be accessible through runner-isolated-network!
    environment:
      APP_NAME: ${APP_NAME}
      SERVICE_NAME: ${TESTRUNNER_SERVICE_NAME}
      PORT: ${TESTRUNNER_PORT}
      MONGO_DB_URI: mongodb://${MONGO_HOSTS}/${TESTRUNNER_DB}?replicaSet=${MONGO_REPL_ID}&retryWrites=true&w=majority
    depends_on:
      - mongo-manager
      - ubuntu
  # ubuntu image (needed in the test runner service)
  ubuntu:
    container_name: ubuntu
    image: ubuntu:latest
